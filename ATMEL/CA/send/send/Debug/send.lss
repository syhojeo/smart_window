
send.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000162  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000094f  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000893  00000000  00000000  00000b57  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000301  00000000  00000000  000013ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  000016ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000418  00000000  00000000  0000175c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c9  00000000  00000000  00001b74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001c3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	1f d0       	rcall	.+62     	; 0xd8 <main>
  9a:	37 c0       	rjmp	.+110    	; 0x10a <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <putch>:
#include <avr/io.h>
#define F_CPU 16000000UL 
#include <util/delay.h>

void putch(char data){
	while(!(UCSR0A & (1<<UDRE0)));
  9e:	5d 9b       	sbis	0x0b, 5	; 11
  a0:	fe cf       	rjmp	.-4      	; 0x9e <putch>
	UDR0 = data;
  a2:	8c b9       	out	0x0c, r24	; 12
  a4:	08 95       	ret

000000a6 <puts>:
}

void puts(char *str){
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	ec 01       	movw	r28, r24
	while(*str!=0){
  ac:	88 81       	ld	r24, Y
  ae:	88 23       	and	r24, r24
  b0:	29 f0       	breq	.+10     	; 0xbc <puts+0x16>
  b2:	21 96       	adiw	r28, 0x01	; 1
		putch(*str);
  b4:	f4 df       	rcall	.-24     	; 0x9e <putch>
	while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = data;
}

void puts(char *str){
	while(*str!=0){
  b6:	89 91       	ld	r24, Y+
  b8:	81 11       	cpse	r24, r1
  ba:	fc cf       	rjmp	.-8      	; 0xb4 <puts+0xe>
		putch(*str);
		str++;
	}
}
  bc:	df 91       	pop	r29
  be:	cf 91       	pop	r28
  c0:	08 95       	ret

000000c2 <init>:

void init(void){
	UCSR0A = 0x00;
  c2:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = 0b00011000;
  c4:	88 e1       	ldi	r24, 0x18	; 24
  c6:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = 0b00000110;
  c8:	86 e0       	ldi	r24, 0x06	; 6
  ca:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	UBRR0H = 0x00;
  ce:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 0x67;
  d2:	87 e6       	ldi	r24, 0x67	; 103
  d4:	89 b9       	out	0x09, r24	; 9
  d6:	08 95       	ret

000000d8 <main>:
}

void main(){
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	00 d0       	rcall	.+0      	; 0xde <main+0x6>
  de:	1f 92       	push	r1
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62
	char Hello[] = "20";
  e4:	82 e3       	ldi	r24, 0x32	; 50
  e6:	90 e3       	ldi	r25, 0x30	; 48
  e8:	9a 83       	std	Y+2, r25	; 0x02
  ea:	89 83       	std	Y+1, r24	; 0x01
  ec:	1b 82       	std	Y+3, r1	; 0x03
	
	
	init();
  ee:	e9 df       	rcall	.-46     	; 0xc2 <init>
	
	while(1){
		
		puts(Hello);
  f0:	ce 01       	movw	r24, r28
  f2:	01 96       	adiw	r24, 0x01	; 1
  f4:	d8 df       	rcall	.-80     	; 0xa6 <puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f6:	2f ef       	ldi	r18, 0xFF	; 255
  f8:	8b e7       	ldi	r24, 0x7B	; 123
  fa:	92 e9       	ldi	r25, 0x92	; 146
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	80 40       	sbci	r24, 0x00	; 0
 100:	90 40       	sbci	r25, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <main+0x24>
 104:	00 c0       	rjmp	.+0      	; 0x106 <main+0x2e>
 106:	00 00       	nop
 108:	f3 cf       	rjmp	.-26     	; 0xf0 <main+0x18>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
