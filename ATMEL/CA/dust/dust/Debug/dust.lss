
dust.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  0000016c  000001e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b7c  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000086b  00000000  00000000  00000e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000400  00000000  00000000  000016c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00001ac4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000045a  00000000  00000000  00001b94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000210  00000000  00000000  00001fee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000021fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e6       	ldi	r30, 0x6C	; 108
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 31       	cpi	r26, 0x1C	; 28
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	4a d0       	rcall	.+148    	; 0x148 <main>
  b4:	59 c0       	rjmp	.+178    	; 0x168 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <delay>:
	if (p == LEFT){
		command_set(0x14);
	}
	else if
		(p==RIGHT){
		command_set(0x1c);
  b8:	99 23       	and	r25, r25
  ba:	6c f0       	brlt	.+26     	; 0xd6 <delay+0x1e>
  bc:	20 e0       	ldi	r18, 0x00	; 0
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	ef e9       	ldi	r30, 0x9F	; 159
  c2:	ff e0       	ldi	r31, 0x0F	; 15
  c4:	31 97       	sbiw	r30, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <delay+0xc>
  c8:	00 c0       	rjmp	.+0      	; 0xca <delay+0x12>
  ca:	00 00       	nop
  cc:	2f 5f       	subi	r18, 0xFF	; 255
  ce:	3f 4f       	sbci	r19, 0xFF	; 255
  d0:	82 17       	cp	r24, r18
  d2:	93 07       	cpc	r25, r19
  d4:	ac f7       	brge	.-22     	; 0xc0 <delay+0x8>
  d6:	08 95       	ret

000000d8 <E_pulse>:
  d8:	19 9a       	sbi	0x03, 1	; 3
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	ec df       	rcall	.-40     	; 0xb8 <delay>
  e0:	19 98       	cbi	0x03, 1	; 3
  e2:	08 95       	ret

000000e4 <command_set>:
  e4:	18 98       	cbi	0x03, 0	; 3
  e6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
  ea:	f6 cf       	rjmp	.-20     	; 0xd8 <E_pulse>
  ec:	08 95       	ret

000000ee <data_set>:
  ee:	18 9a       	sbi	0x03, 0	; 3
  f0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
  f4:	f1 cf       	rjmp	.-30     	; 0xd8 <E_pulse>
  f6:	08 95       	ret

000000f8 <cursor_at>:
  f8:	61 30       	cpi	r22, 0x01	; 1
  fa:	41 f0       	breq	.+16     	; 0x10c <cursor_at+0x14>
  fc:	28 f0       	brcs	.+10     	; 0x108 <cursor_at+0x10>
  fe:	62 30       	cpi	r22, 0x02	; 2
 100:	39 f0       	breq	.+14     	; 0x110 <cursor_at+0x18>
 102:	63 30       	cpi	r22, 0x03	; 3
 104:	39 f0       	breq	.+14     	; 0x114 <cursor_at+0x1c>
 106:	07 c0       	rjmp	.+14     	; 0x116 <cursor_at+0x1e>
 108:	60 e8       	ldi	r22, 0x80	; 128
 10a:	05 c0       	rjmp	.+10     	; 0x116 <cursor_at+0x1e>
 10c:	60 ec       	ldi	r22, 0xC0	; 192
 10e:	03 c0       	rjmp	.+6      	; 0x116 <cursor_at+0x1e>
 110:	64 e9       	ldi	r22, 0x94	; 148
 112:	01 c0       	rjmp	.+2      	; 0x116 <cursor_at+0x1e>
 114:	64 ed       	ldi	r22, 0xD4	; 212
 116:	86 0f       	add	r24, r22
 118:	e5 cf       	rjmp	.-54     	; 0xe4 <command_set>
 11a:	08 95       	ret

0000011c <writestring_lcd>:
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	ea 01       	movw	r28, r20
 122:	ea df       	rcall	.-44     	; 0xf8 <cursor_at>
 124:	88 81       	ld	r24, Y
 126:	88 23       	and	r24, r24
 128:	29 f0       	breq	.+10     	; 0x134 <writestring_lcd+0x18>
 12a:	21 96       	adiw	r28, 0x01	; 1
 12c:	e0 df       	rcall	.-64     	; 0xee <data_set>
 12e:	89 91       	ld	r24, Y+
 130:	81 11       	cpse	r24, r1
 132:	fc cf       	rjmp	.-8      	; 0x12c <writestring_lcd+0x10>
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	08 95       	ret

0000013a <init_lcd>:
 13a:	88 e3       	ldi	r24, 0x38	; 56
 13c:	d3 df       	rcall	.-90     	; 0xe4 <command_set>
 13e:	8f e0       	ldi	r24, 0x0F	; 15
 140:	d1 df       	rcall	.-94     	; 0xe4 <command_set>
 142:	86 e0       	ldi	r24, 0x06	; 6
 144:	cf cf       	rjmp	.-98     	; 0xe4 <command_set>
 146:	08 95       	ret

00000148 <main>:

#include "lcd.h"


void main(void){
	DDRE = 0xff;
 148:	8f ef       	ldi	r24, 0xFF	; 255
 14a:	82 b9       	out	0x02, r24	; 2
	DDRF = 0xff;
 14c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	
	init_lcd();
 150:	f4 df       	rcall	.-24     	; 0x13a <init_lcd>
	writestring_lcd (0,0,"welcome to robot");
 152:	40 e0       	ldi	r20, 0x00	; 0
 154:	51 e0       	ldi	r21, 0x01	; 1
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	e0 df       	rcall	.-64     	; 0x11c <writestring_lcd>
	writestring_lcd (0,1, "you r vip");
 15c:	41 e1       	ldi	r20, 0x11	; 17
 15e:	51 e0       	ldi	r21, 0x01	; 1
 160:	61 e0       	ldi	r22, 0x01	; 1
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	db df       	rcall	.-74     	; 0x11c <writestring_lcd>
 166:	ff cf       	rjmp	.-2      	; 0x166 <main+0x1e>

00000168 <_exit>:
 168:	f8 94       	cli

0000016a <__stop_program>:
 16a:	ff cf       	rjmp	.-2      	; 0x16a <__stop_program>
